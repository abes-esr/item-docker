#
# Ci-dessous la config qui permet de lancer item-docker
#
# Remarque: avant de lancer docker-compose up, il faut régler le fichier .env
# en partant du fichier .env-dist qui donne les variables d'environnements
# à personnaliser et des exemples de valeurs.
#

#  PostgreSQL Database directory appears to contain a database; Skipping initialization
#  2023-04-19T12:03:02.864012500Z
# 2023-04-19T12:03:02.909911700Z 2023-04-19 12:03:02.909 UTC [1] FATAL:  les fichiers de la base de données sont incompatibles avec le serveur
# 2023-04-19T12:03:02.909952600Z 2023-04-19 12:03:02.909 UTC [1] DÉTAIL:  Le répertoire des données a été initialisé avec PostgreSQL version 14,
# 2023-04-19T12:03:02.909964000Z 	qui est non compatible avec cette version 15.1 (Debian 15.1-1.pgdg110+1).

version: "3.5"

services:

  ####################################
  # Interface utilisateur de item
  # ----------------------------------
  # (basé sur vuejs)
  item-front:
    image: abesesr/item:${ITEM_FRONT_VERSION}
    container_name: item-front
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    environment:
      ITEM_FRONT_API_BASEURL: ${ITEM_FRONT_API_BASEURL}
    ports:
      - ${ITEM_FRONT_HTTP_PORT}:80
    depends_on:
      - item-api
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=item"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=nginx"
      # pour que les mises à jour de cette image soient auto-déployées par watchtower
      - "com.centurylinklabs.watchtower.scope=item-watchtower-scope"



  ############################
  # item-api
  # API de item
  # (écrite en java spring boot)
  item-api:
    image: abesesr/item:${ITEM_API_VERSION}
    container_name: item-api
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    volumes:
      - ${ITEM_API_WORKDIR}:/workdir/
    environment:
      # Pour basculer sur bon application-xxx.properties préalablement embarqué
      # dans le code ici:
      # https://github.com/abes-esr/abes-hello-back/tree/develop/web/src/main/resources/
      SPRING_PROFILES_ACTIVE: ${ITEM_API_SPRING_PROFILES_ACTIVE}
      # Pour surcharger les paramètres spring du application-xxx.properties
      # ci-dessous via le système de .env de docker
      # https://www.linkedin.com/pulse/externalizing-properties-spring-boot-application-docker-phani-bushan
      # pour la liste de tous les champs qu'on peut surcharger,
      # voir le contenu des application-xxx.properties embarqués dans le code sources
      SPRING_DATASOURCE_ITEM_JDBCURL: 'jdbc:postgresql://item-db:5432/item'
      SPRING_DATASOURCE_ITEM_USERNAME: ${ITEM_DB_POSTGRES_USER}
      SPRING_DATASOURCE_ITEM_PASSWORD: ${ITEM_DB_POSTGRES_PASSWORD}
      SPRING_DATASOURCE_BASEXML_JDBCURL: ${ITEM_API_SPRING_BASEXML_DATASOURCE_URL}
      SPRING_DATASOURCE_BASEXML_USERNAME: ${ITEM_API_SPRING_BASEXML_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_BASEXML_PASSWORD: ${ITEM_API_SPRING_BASEXML_DATASOURCE_PASSWORD}
      SUDOC_SERVEUR: ${ITEM_SUDOC_SERVER}
      SUDOC_PORT : ${ITEM_SUDOC_PORT}
      SUDOC_LOGIN : ${ITEM_SUDOC_LOGIN}
      APP_JWTSECRET: ${ITEM_API_JWT_SECRET}
    ports:
      - ${ITEM_API_HTTP_PORT}:8082
    depends_on:
      - item-db
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=item"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=java-spring"
      # pour que les mises à jour de cette image soient auto-déployées par watchtower
      - "com.centurylinklabs.watchtower.scope=item-watchtower-scope"


  item-batch:
    image: abesesr/item:${ITEM_BATCH_VERSION}
    container_name: item-batch
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    volumes:
      - ${ITEM_BATCH_STAT_WORKDIR}:/stat/
      - ${ITEM_API_WORKDIR}:/workdir/
    environment:
      ITEM_BATCH_AT_STARTUP: ${ITEM_BATCH_AT_STARTUP}
      ITEM_BATCH_DEPLOY_CRON: ${ITEM_BATCH_DEPLOY_CRON}
      ITEM_BATCH_CRON_TRAITEMENT: ${ITEM_BATCH_CRON_TRAITEMENT}
      ITEM_BATCH_CRON_STAT: ${ITEM_BATCH_CRON_STAT}
      # Pour basculer sur bon application-xxx.properties préalablement embarqué
      # dans le code ici:
      # https://github.com/abes-esr/abes-hello-back/tree/develop/batch/src/main/resources/
      SPRING_PROFILES_ACTIVE: ${ITEM_API_SPRING_PROFILES_ACTIVE}
      # Pour surcharger les paramètres spring du application-xxx.properties
      # ci-dessous via le système de .env de docker
      # https://www.linkedin.com/pulse/externalizing-properties-spring-boot-application-docker-phani-bushan
      # pour la liste de tous les champs qu'on peut surcharger,
      # voir le contenu des application-xxx.properties embarqués dans le code sources
      SPRING_DATASOURCE_ITEM_JDBCURL: 'jdbc:postgresql://item-db:5432/item'
      SPRING_DATASOURCE_ITEM_USERNAME: ${ITEM_DB_POSTGRES_USER}
      SPRING_DATASOURCE_ITEM_PASSWORD: ${ITEM_DB_POSTGRES_PASSWORD}
      SPRING_DATASOURCE_BASEXML_JDBCURL: ${ITEM_API_SPRING_BASEXML_DATASOURCE_URL}
      SPRING_DATASOURCE_BASEXML_USERNAME: ${ITEM_API_SPRING_BASEXML_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_BASEXML_PASSWORD: ${ITEM_API_SPRING_BASEXML_DATASOURCE_PASSWORD}
      SUDOC_SERVEUR: ${ITEM_SUDOC_SERVER}
      SUDOC_PORT : ${ITEM_SUDOC_PORT}
      SUDOC_LOGIN : ${ITEM_SUDOC_LOGIN}
      BATCH_MIN_HOUR: ${BATCH_MIN_HOUR}
      BATCH_MAX_HOUR: ${BATCH_MAX_HOUR}
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=item"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=java-spring"



  ##############################
  # item-db
  # Base de données postgresql de item
  item-db:
    image: abesesr/postgres-fr_fr:15.1.0
    container_name: item-db
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    ports:
      - ${ITEM_DB_POSTGRES_EXTERNAL_PORT}:5432
    environment:
      # cf https://github.com/docker-library/docs/blob/master/postgres/README.md#environment-variables
      POSTGRES_DB: "item"
      POSTGRES_USER: ${ITEM_DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ITEM_DB_POSTGRES_PASSWORD}
    volumes:
      - ./volumes/item-db/pgdata/:/var/lib/postgresql/data/
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=item"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=postgresql"
    ports:
      - 5432:5432


  #################################
  # item-db-adminer
  # Interface d'admin de postgresql
  item-db-adminer:
    image: adminer:4.8.1
    container_name: item-db-adminer
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    restart: unless-stopped
    ports:
      - ${ITEM_DB_ADMINER_HTTP_PORT}:8080
    depends_on:
      - item-db
    environment:
      ADMINER_DEFAULT_SERVER: "item-db"
    logging:
      driver: none # pas de log pour adminer pour ne pas polluer



  ######################################
  # item-db-dumper
  # Dump de la base de données postgresql
  # (dump tous les jours pour les sauvegardes)
  # https://github.com/tiredofit/docker-db-backup
  item-db-dumper:
    image: tiredofit/db-backup:3.3.11
    container_name: item-db-dumper
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    volumes:
     - ${ITEM_DB_DUMP_WORKDIR}:/backup/
    depends_on:
      - item-db
    environment:
      # DB_DUMP_BEGIN: "0130" <= tous les jours à 1h30 du matin GMT
      # DB_DUMP_FREQ: 1440 <= chaque jour
      # DB_CLEANUP_TIME: 10080 (1440*7) <= conserve uniquement les 7 derniers jours
      DB_TYPE: "pgsql"
      DB_HOST: "item-db"
      DB_NAME: "item"
      DB_USER: ${ITEM_DB_POSTGRES_USER}
      DB_PASS: ${ITEM_DB_POSTGRES_PASSWORD}
      DB_DUMP_BEGIN: "0130"
      DB_DUMP_FREQ: 1440
      DB_CLEANUP_TIME: 10080
      SPLIT_DB: "true"
      COMPRESSION: "GZ"
      DEBUG_MODE: "false"
      CONTAINER_ENABLE_SCHEDULING: "false"
      CONTAINER_ENABLE_MONITORING: "false"
    labels:
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=item"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=adhoc"
      # log multiline aussi pour ce conteneur avec des lignes qui ressemblent à ceci:
      # 2022-08-01.14:55:00 [NOTICE] ** [db-backup] Dumping PostgresSQL database: 'item' and compressing with 'gzip'
      - "co.elastic.logs/multiline.type=pattern"
      - "co.elastic.logs/multiline.pattern='^.*Dumping PostgresSQL database'"
      - "co.elastic.logs/multiline.negate=true"
      - "co.elastic.logs/multiline.match=after"



  #######################################
  # item-watchtower
  # Conteneur chargé de mettre à jour automatiquement toutes les N secondes
  # les images docker des conteneurs surveillés (via le système de label/scope de watchtower)
  # plus d'info : https://containrrr.dev/watchtower
  # cf README.md pour explications : https://github.com/abes-esr/item-docker#d%C3%A9ploiement-continu
  item-watchtower:
    image: containrrr/watchtower:1.4.0
    container_name: item-watchtower
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    cpu_limit: ${CPU_LIMIT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: 60
      WATCHTOWER_DEBUG: "false"
      WATCHTOWER_NO_STARTUP_MESSAGE: "true"
      WATCHTOWER_WARN_ON_HEAD_FAILURE: "never"
      WATCHTOWER_RUN_ONCE: ${ITEM_WATCHTOWER_RUN_ONCE}
      WATCHTOWER_NOTIFICATIONS: "slack"
      WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: ${ITEM_WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL}
      WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER: ${ITEM_WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER}
      WATCHTOWER_NOTIFICATION_SLACK_CHANNEL: "#notif-item"
      WATCHTOWER_SCOPE: "item-watchtower-scope"
    labels:
      - "com.centurylinklabs.watchtower.scope=item-watchtower-scope"



